# Name of your application. Used to uniquely configure containers.
service: force

# Name of the container image.
image: rbriski/force

# Deploy to these servers.
servers:
  - 143.244.178.63

labels:
  traefik.http.routers.force-app.rule: "Host(`deanzaforce.club`)"
  traefik.http.routers.force-app.tls: true
  traefik.http.routers.force-app.tls.certresolver: letsencrypt

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: rbriski

  # Always use an access token rather than real password when possible.
  password:
    - DOCKER_REGISTRY_TOKEN
# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    DB_HOST: 143.244.178.63
    AT_BASE_ID: appK55TripXu6J443
    AT_ROSTER: tblxFeLgJfC3OobXC
    AT_PARENTS: tblAelYcekjAKB7wg
    AT_EXPENSES: tblbmDRfIFweI3rih
    AT_PAYMENTS: tblLAiPaxvYyKZOry
    AT_EVENTS: tblEDzvuXiAOyvqvv
    PAYPAL_LINK: https://www.paypal.com/paypalme/Force2010G
    MIGRATION_SOURCE: file:///app/migrations
    MIGRATE_BIN: $HOME/go/bin/migrate
    POSTGRES_USER: postgres
  secret:
    - MAILGUN_API_KEY
    - SENDGRID_API_KEY
    - AT_API_KEY
    - DATABASE_URL
    - POSTGRES_PASSWORD
# Use a different ssh user than root
# ssh:
#   user: app

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1

# Use accessory services (secrets come from .env).
accessories:
  db:
    image: postgres:16-alpine
    host: 143.244.178.63
    port: 5432
    env:
      clear:
        POSTGRES_USER: postgres
      secret:
        - POSTGRES_PASSWORD
    volumes:
      - data:/var/lib/postgresql/data
  redis:
    image: redis:7.2.4
    host: 143.244.178.63
    port: 6379
    volumes:
      - redis-data:/data

# Configure custom arguments for Traefik
traefik:
  options:
    publish:
      - "443:443"
    volumes:
      - acme:/etc/traefik/acme/
    memory: 500m
  args:
    accesslog: true
    accesslog.format: json
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    entryPoints.web.http.redirections.entryPoint.to: websecure
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: "rbriski@gmail.com"
    certificatesResolvers.letsencrypt.acme.storage: "/etc/traefik/acme/letsencrypt.json"
    certificatesResolvers.letsencrypt.acme.dnsChallenge: true
    certificatesResolvers.letsencrypt.acme.dnsChallenge.provider: cloudflare
    certificatesResolvers.letsencrypt.acme.dnsChallenge.resolvers: 1.1.1.1:53
    certificatesResolvers.letsencrypt.acme.caServer: https://acme-v02.api.letsencrypt.org/directory
  env:
    secret:
      - CF_DNS_API_TOKEN
      - CF_API_EMAIL

# Configure a custom healthcheck (default is /up on port 3000)
healthcheck:
  path: /healthz
  port: 3000
  max_attempts: 7
  interval: 20s
  cord: false
# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
